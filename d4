
-----------------------------------------------------------------------------------------------------

         **** PYTHON  bootcamp *****

-----------------------------------------------------------------------------------------------------
//code to convert alphabet to ascii and ascii to alphabet
-----------------------------------------------------------------------------------------------------
a=(input("enter the letter "))
print(ord(a))                          #prints ascii value
//output:-
          enter the letter a 97
-----------------------------------------------------------------------------------------------------
a=int(input("enter the ascii number "))
print(chr(a))                           #prints alphabet
//output:-
           enter the ascii number 65 A

-----------------------------------------------------------------------------------------------------
//code to jump of alphabet by given number

a=input()
p=int(input())
c=(ord(a)+p)
print(chr(c))
//output:-
          h
          3
          k
-----------------------------------------------------------------------------------------------------

a=input()
p=int(input())
c=(ord(a)+p)
if(c>122):
    c=c-26
    print(chr(c))
else:
    print(chr(c))
//output:- 
           x
           4
           b

-----------------------------------------------------------------------------------------------------
//pattern to print right-angle triangle

a=int(input())
for i in range(1,a):
    for j in range(1,a):
        if(i>=j):
            print("*",end=" ")
    print()
-----------------------------------------------------------------------------------------------------
//method-2
	
a=input()
for i in range(0,4):
     for j in range(i+1):
	    print("*",end=" ")
     print()
3
* 
* * 
* * * 
* * * * 		

Pattern problem
-----------------------------------------------------------------------------------------------------		
a=input()
for i in range(0,4):
    print("* "*(i+1))
		
* * * *  
* * *   
* *    
*
-----------------------------------------------------------------------------------------------------		
a=int(input())
for i in range(a):
    print(" "*(i+1)+"* "*(a-i));
* * * * 
 * * * 
  * * 
   *
-----------------------------------------------------------------------------------------------------				
a=int(input())
for i in range(a):
     print(" "*(a-i)+"* "*(i+1));
for j in range(a):
     print(" "*(j+1)+"* "*(a-j));
					
					    * 
					   * * 
					  * * * 
					 * * * * 
					 * * * * 
					  * * * 
					   * * 
					    *
-----------------------------------------------------------------------------------------------------						
a=int(input())
for i in range(a):
      print(str(i+1)*(i+1))
							1
							22
							333
-----------------------------------------------------------------------------------------------------							
a=int(input())
for i in range(a):
      print(str(i+1)*(i+1),end=" ")
								4
								1 22 333 4444
								
-----------------------------------------------------------------------------------------------------								
a=int(input())
for i in range(1,a):
	print((i*((10**i)//9)),end=" ")
 //  4
    1 22 333 
-----------------------------------------------------------------------------------------------------									
NOTE:- to solve any pattern problems first analysis the diagram
 - - - - * -
 - - - * - * -
 - - * - * - * -
 - * - * - * - * -

Here the space is decreasing from top to bottom and " * -" are increasing

a=int(input())
For I in range(a):
    For j in range(a-1):
       print(" ",end=' ')
    For k in range(I+1):
       print("*",end=" ")
print()

a=int(input())
for i in range(a):
    print((10**i))	
//output:-
    3
    1
    10
    100
-----------------------------------------------------------------------------------------------------
*** FUNCTIONS ***
-----------------------------------------------------------------------------------------------------
Syntax:-
  def function-name():	
       Statements
-----------------------------------------------------------------------------------------------------

def cse():
   print("hi")
def  ece(x,y):
   print("hello",x+y)
ece(5,6)
cse()
//output:-
         hello 11
          hi

Error:-
    ece(5,6,8):-TypeError is displayed only two variables are assigned	-ece(x,y)

-----------------------------------------------------------------------------------------------------
def ece(*x):
   print("hello",x)
ece(5,6,7,8,9,10)

//output:-

hello (5, 6, 7, 8, 9, 10
-----------------------------------------------------------------------------------------------------
NOTE:- followed by variable will allow to pass more no of variables beyond the limit

NOTE:- there is no pointer concept in python and java as pointer refer to the address which causes security issues but pointer is default in c language
-----------------------------------------------------------------------------------------------------
def ece(x,y=10):
    print("hello",x,y)
ece(5,6)           # output:-hello 5 6
ece(5)             # output:-hello 5 10
ece(,6).           #prints the error of the SYNTAX ERROR is displayed

-----------------------------------------------------------------------------------------------------
def ece(x=10,y):
    print("hello",x,y)
ece()
#SyntaxError: non-default argument follows default argument

-----------------------------------------------------------------------------------------------------
def ece(x,y=50,z=12):
    print("hello",x,y)
ece(5+3, ,8)              #SyntaxError: invalid syntax
ece(5+3,6,)               #output:-hello 8 6


-----------------------------------------------------------------------------------------------------
   **** RECURSION CONCEPT ****
-----------------------------------------------------------------------------------------------------

NOTE: RECURSION is mainly to two types :- linear and non linear
      Most often we use non linear recursion . We use the concept of non linear recursion for graphs 
      And trees
    ->every recursion process is like a spring which starts from one end and reach other end then       
      Traverse back to the position from which the process starts
-----------------------------------------------------------------------------------------------------
Eg:-

 '''
 s-1:- goes of def ece 
 s-2:- prints hello 
       then execute cse(x+3) //4+3=7
 s-3:- goes to def cse 
       print hi 7
       by this the operation of ece is completed 
 s-4:-print 2
'''
def cse(x):
    print("hi")
    print(x)
def ece(x):
    print("hello")
    cse(x+3)
    print(x)
ece(4)
print(2)
-----------------------------------------------------------------------------------------------------

'''
 s-1:- goes of def ece 
 s-2:- prints hello 
       then execute cse(x+3) //4+3=7
 s-3:- goes to def cse 
       print hi 7
       then execute the def ece (7-3)//4
       prints hello 
       cse(4+3) //7
s-4:-error loop repeats infinte times
    RecursionError: maximum recursion depth exceeded while calling a Python object
'''
def cse(x):
    print("hi")
    print(x)
    ece(x-3)
def ece(x):
    print("hello")
    cse(x+3)
    print(x)
#ece(5)
ece(4)
print(2)

NOTE:- recursion repeats for a maximum of 96 times for a infinite loop before terminating

-----------------------------------------------------------------------------------------------------
def cse():
    return 0
cse()              #no output


def cse(x):            //output:-hi
    if(x==0):                    hi
        return 0                 hi
    print("hi")                  hi
    cse(x-1)                
cse(4) 

NOTE:- RETURN :-statement takes back to the starting position of that recursion
               There are about 0 to 15535 return statements each with a unique message
               Eg:- 404 page not found in google
-----------------------------------------------------------------------------------------------------
'''
we see that value of 4 is reduced to 0 but it is half of total recursion as as said before recursion works like a spring it satart from 4 - 0 returns back from 0-4
'''
def cse(x):           //output:-4
    if(x==0):                   3
        return 0.               2
    print(x).                   1
    cse(x-1).                   1
    print(x).                   2
cse(4)                          3
                                4
-----------------------------------------------------------------------------------------------------
def cse(x):
    if(x==0):
        return 0
    return(x+cse(x-1)) 
print(cse(4))
 #output:-return(4 +  cse(3-1) )// 4+cse(3)=4+3+2+1 //final:-10
          #return(3 +  cse(2-1) ).//3+cse(2)=3+2+1
          #return(2 +  cse(2-1) ).//2+cse(1)=1+2
          #return(1 +  cse(1-1) ) //1+ cse(0)= //cse(0)=0

-----------------------------------------------------------------------------------------------------
def cse(x):
    if(x==0):
        return 0
    return(x*cse(x-1)) 
print(cse(4))
 #output:-return(4 *  cse(3-1) )// 4*cse(3)=4*3*2*1*0//final:-0
          #return(3 *  cse(2-1) ).//3*cse(2)=3*2*1*0
          #return(2 *  cse(2-1) ).//2*cse(1)=0*1*2
          #return(1 * cse(1-1) ) //1*cse(0)= //cse(0)=0

-----------------------------------------------------------------------------------------------------
def cse(x):
    if(x==0):
        return 1
    return(x*cse(x-1)) 
print(cse(4))
 #output:-return(4 *  cse(3-1) )// 4*cse(3)=4*3*2*1//final:-24
          #return(3 *  cse(2-1) ).//3*cse(2)=3*2*1
          #return(2 *  cse(2-1) ).//2*cse(1)=1*2
          #return(1 * cse(1-1) ) //1*cse(0)= //cse(0)=1

-----------------------------------------------------------------------------------------------------
Tower of Hanoi
-----------------------------------------------------------------------------------------------------
def toh(n,s,a,d):
    c=0
    if(n==1):
        print(n,"moves from"+s+"to"+d)
        c+=1
    else:
        c+=toh(n-1,s,d,a)
        print(n,"moves from"+s+"to"+d)
        c+=1
        c+=toh(n-1,a,s,d)
    return c
n=int(input())
print(toh(n,'A','B','C'))


Eg:-
3
1 moves from A to C
2 moves from A to B
1 moves from C to B
3 moves from A to C
1 moves from B to A
2 moves from B to C
1 moves from A to C
7
-----------------------------------------------------------------------------------------------------


def cse(x):
    if(x==1):
        return 1
    if(x==2):
        return 2
    return cse(x-1)+cse(x-2)
print(cse(4))
#return cse(4-1)+cse(4-2)->return cse(3)+cse(2)->(2+1)+2=>5
#return cse(3-1)+cse(3-2)->return cse(2)+cse(1)->2+1
#return cse(2-1)+cse(2-2)->return cse(1)+cse(0)->1
 
-----------------------------------------------------------------------------------------------------
         *** object oriented programming (00PS) ***

-----------------------------------------------------------------------------------------------------

Class :- has the original data it send a copy to perform operations on data using methods

Oops have 3 main topics:-
Object:- is used to provide permission to access the data of class
        Eg:- saving money with mom
             If u give permission only then money is ur mom return money //non static  data
            If ur mom and  u can access the amount //static data
In above eg:-mom -class
             U -object
             Money-data
             Usage of amount-method

Class
|
->data :- knowledge eg:-car color, petrol, machine
|
->method :- usage of knowledge eg:-speed ,acceleration, pickup
-----------------------------------------------------------------------------------------------------
SYNTAX:-

class cse:
   pass
    
a=cse()
print(a) #output:-<__main__.cse object at 0x7f46cd67bf70>
                 returns the location of class
-----------------------------------------------------------------------------------------------------
//2

class cse:
   def q(self):
       print("hi")
       
a=cse()
 #output:-no output
-----------------------------------------------------------------------------------------------------
//3

class cse:
   def q(self):
       print("hi")
       
a.q()
 #output:-NameError: name 'a' is not defined
-----------------------------------------------------------------------------------------------------
//4
class cse:
   def q(self):
       print("hi")

a=cse()      
cse.q(a)
 #output:-hi
-----------------------------------------------------------------------------------------------------

class cse:
    x = 10  # Add a class variable x

    def __init__(self):
        self.y = 30

    def q(self):
        print("hi")

a = cse()
a.q()
print(cse.x, a.y)
-----------------------------------------------------------------------------------------------------
NOTE:-SELF:- decides method is static & non static.
      Cse.q(a) // a is like permission without the value enter it is will not execute
      Cse.q()//obj.(or) class permission
      Construct:-link the object with the variable
-----------------------------------------------------------------------------------------------------
 *** linked list ***
-----------------------------------------------------------------------------------------------------
class Node:
    def __init__(self, z):
        self.data = z
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def create(self, x):
        if self.head is None:
            self.head = Node(x)
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = Node(x)

    def add_front(self, x):
        new_node = Node(x)
        new_node.next = self.head
        self.head = new_node

    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data, end=" ")
            temp = temp.next

# Create an instance of LinkedList
b = LinkedList()

# Add elements to the linked list
b.create(20)
b.create(30)
b.create(40)

# Display the linked list
b.display()

