----------------------------------------------------------------------------------------------------- 
                                        TRAINING DAY-5 (recursion)
-----------------------------------------------------------------------------------------------------
//print the numbers 1 to n
def f(a):
    if(a==0):
        return 0
    f(a-1)
    print(a)
f(a)
//3
1
2
3
-----------------------------------------------------------------------------------------------------
//print numbers in reverse order
def f(a):
    if(a==0):
        return 0
    print(a)
    f(a - 1)
f(a)
-----------------------------------------------------------------------------------------------------
//SUM OF N  NUMBERS
-----------------------------------------------------------------------------------------------------
def f(a):
    if(a==0):
        return 0
    else:
        return(a+f(a-1))
print(f(a))
//3
  6
-----------------------------------------------------------------------------------------------------
//multiplication table
-----------------------------------------------------------------------------------------------------
a=int(input())
b=int(input())
def f(a):
    if(a==0):
        return 1
    f(a-1)
    print(b*a)
f(a)
//3
3 
6 
9
//
-----------------------------------------------------------------------------------------------------
//palindrome or not a palindrome
-----------------------------------------------------------------------------------------------------
s=input()
i=0
j=len(s)-1
while(i<j):
    if s[i]!=s[j]:
        print("not palindrome")
        break
    i=i+1
    j=j-1
else:
    print("palindrome")
  
-----------------------------------------------------------------------------------------------------
//using recursion
-----------------------------------------------------------------------------------------------------
def r(s,i,j):
    if i>j:
        return True
    if s[i]!=s[j]:
        return False
    return(r(s,i+1,j-1))
s=input()
print(r(s,0,len(s)-1))
//aaa
True
-----------------------------------------------------------------------------------------------------
//print letters of a word
-----------------------------------------------------------------------------------------------------
def r(s,i,j):
    if i>j:
        return 1
    else:
        print((s[i]))
        return(r(s,i+1,j))
s=input()
print(r(s,0,len(s)-1))
//hi
h
i
1
-----------------------------------------------------------------------------------------------------
//to check whether two strings are same or not
-----------------------------------------------------------------------------------------------------

def r(s,i,j,p,k,j1):
    if s[i]!=p[k]:
        print("not same")
    elif i==j:
        print("same")
    else:
        return(r(s,i+1,j,p,k+1,j1))

s=input()
p=input()
print(r(s,0,len(s)-1,p,0,len(p)-1))
//hi
hi
same
-----------------------------------------------------------------------------------------------------
// land and water
-----------------------------------------------------------------------------------------------------
a=[]
n=int(input())
for i in range(n):
   a.append(list(map(int,input().split())))
def f(a,i,j,n):
    if(a[i][j]==0):
        return 0
    if(a[i][j]==1):
        a[i][j]=0
    if(j<n-1):
        (f(a,i,j+1,n))
    if(j>0):
        (f(a,i,j-1,n))
    if(i>0):
        (f(a,i-1,j,n))
    if(i<n-1):
        (f(a,i+1,j,n))
count=0
for i in range(n):
    for j in range(n):
        if a[i][j]==1:
            count+=1
            f(a,i,j,n)
print(count)
//4
0 1 0 1
1 1 0 0
0 0 1 0
0 0 1 1
3
-----------------------------------------------------------------------------------------------------
              Basic and Standard Problems
-----------------------------------------------------------------------------------------------------
---------------------------------------------------------------
//magical matrix
---------------------------------------------------------------
 n=int(input())
 a=[[0]*n for i in range(n) ]
 k=1
 i=n//2
 j=n-1
 while k<=(n*n):
     if i<0 and j==n:
         i=0
         j=n-2
     else:
         if j==n:
             j=0
         if i==-1 or i<0:
             i=n-1
     if a[i][j]:
         i=i+1
         j=j-2
         continue
     a[i][j]=k
     k+=1
     i-=1
     j+=1
 for i in a:
     print(*i)
 print('magic constant:-',n*((n*n)+1)//2)
 -------------------------------------------------------------
#Check subset sum
---------------------------------------------------------------
def fun(l,target,n):
    if target==0:
        return True
    if n==0:
        return False
    if l[n-1]>target:
        return fun(l,target,n-1)
    return fun(l,target-l[n-1],n-1) or fun(l,target,n-1)
l=list(map(int,input().split(" ")))
target=int(input())
result=fun(l,target,len(l))
print(result
-------------------------------------------------------------------
# valid parenthesis in lexicographical order
----------------------------------------------------------------
def parenthesis(result,n,i,j):
    if j==n:
        print(result)
        return
    if i<n:
        parenthesis(result+"(",n,i+1,j)
    if i>j:
        parenthesis(result+")",n,i,j+1)
n=int(input())
parenthesis("",n,0,0)
         (Or)
---------------using stack-----------------
def order_of_parenthesis(input_str):
    stack = []
    count = 0

    for char in input_str:
        if char == '(':
            stack.append(char)
        elif char == ')' and stack:
            stack.pop()
            count += 2

    return count

input_str = "(())"
output = order_of_parenthesis(input_str)
print(output) 
 # Output will be 2

-------------------------------------------------------------------------
def is_valid(s):
    open=['{','(','[']
    close=['}',')',']']
    brace={'}':'{',')':'(',']':'['}
    stack=[]
    for char in s:
        if char is open:
            stack.append(char)
        elif char is close:
            if not stack or brace[char]!:
                stack.pop()
                return False
    return len(stack)=0
    s=input()
    print(is_valid(s))
-------------------------------------------------------------------------
----------------------
def generate(n):
    def backtract(s, left, right):
        if len(s) == n*2:
            res.append(s)
            return
        if left < n:
            backtract(s+'(', left+1, right)
        if right < left:
            backtract(s+')', left, right+1)
    res = []
    backtract('', 0, 0)
    return res
ans = generate(4)
print(ans)
