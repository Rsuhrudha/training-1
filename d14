             training 14
------------------------------------------------------------------------------------------------
//longest common subsequence
----------------------------------------------------------------------------------------------
def print_matrix(mat):
    for row in mat:
        print(row)
def LCS(s1, s2):
    row, col = len(s1)+1, len(s2)+1
    res=""
    mat = [[None]*col for i in range(row)]
    for i in range(row):
        for j in range(col):
            if i==0 or j == 0:
                mat[i][j] = 0
            elif s1[i-1] == s2[j-1]:
                mat[i][j] = mat[i-1][j-1] + 1
                res+=s1[I]
            else:
                mat[i][j] = max(mat[i-1][j], mat[i][j-1])
    print_matrix(mat)
    return mat[row-1][col-1],res
s1 = "AGTAB"
s2 = "GXTAYB"
answer = LCS(s1, s2)
print("My answer is: ",answer)

-----------------------------------------------------------------------------------------
//longest common subsequence palindrome
-----------------------------------------------------------------------------------------
Theory:-
Memorisation technique is used by which the value calculated once is stored so that it need not to be calculated again
      
        A   G  T  A  B.             Where p=previous
    0.  0   0. 0. 0. 0
-----------------------------
        P.     P. P  p
G.  0.  0   1. 1  1  1.             Note:-  s-1:-length=0
-----------------------------
        P.  P. P. P  p.                     S-2:if same letters than take previous diagonal and                                                                                                  #                                                   add Length+1
X.  0.  0.  1. 1. 1. 1                      s-3:if different then max of adjacent previous value
-----------------------------
        P.        P. P
T.  0.  0.  1. 2  2. 2
-----------------------------
            P. P.    P
A.  0.  1.  1. 2. 3. 3
-----------------------------
        P.  P. P. P  p
Y.  0.  1.  1. 2. 3. 3
-----------------------------
        P.  P  p. P
B.  0.  1.  1. 2. 3. 4

def print_matrix(mat):
    for row in mat:
        print(row)
def LCS(s1, s2):
    row, col = len(s1)+1, len(s2)+1
    mat = [[None]*col for i in range(row)]
    for i in range(row):
        for j in range(col):
            if i==0 or j == 0:
                mat[i][j] = 0
            elif s1[i-1] == s2[j-1]:
                mat[i][j] = mat[i-1][j-1] + 1
            else:
                mat[i][j] = max(mat[i-1][j], mat[i][j-1])
    print_matrix(mat)
    return mat[row-1][col-1]
s1 = "ababaab"
s2 = s1[::-1]
answer = LCS(s1, s2)
print("My answer is: ",answer
//output:-
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 1, 1, 1, 1, 1]
[0, 1, 1, 1, 2, 2, 2, 2]
[0, 1, 2, 2, 2, 3, 3, 3]
[0, 1, 2, 2, 3, 3, 4, 4]
[0, 1, 2, 3, 3, 4, 4, 5]
[0, 1, 2, 3, 3, 4, 4, 5]
[0, 1, 2, 3, 4, 4, 5, 5]
My answer is:  5

-----------------------------------------------------------------------------------------
//all possible palindrome substrings of given string with max length palindrome substring
-----------------------------------------------------------------------------------------
def is_palindrome(s):
    return s == s[::-1]

def find_all_palindromes(input_string):
    palindromes = set()
    input_string = input_string.lower()  # Convert to lowercase for case-insensitive comparison

    for i in range(len(input_string)):
        for j in range(i + 1, len(input_string) + 1):
            substring = input_string[i:j]
            if is_palindrome(substring) and len(substring) > 1:  # Exclude single characters
                palindromes.add(substring)

    return palindromes
input_string = input("Enter a string: ")
palindromes = find_all_palindromes(input_string)
m,c=0,0
if palindromes:
    print("Palindromes in the given string:")
    print(palindromes) #this statement prints all the possible palindro
me substrings in given string
    for palindrome in palindromes:
        n=len(palindrome)
        if m<n:
            m=n
            str=palindrome
    print(str) #print palindrome of max length
    for palindrome in palindromes:
        n=len(palindrome)
        if n<m:
            c=n
    for palindrome in palindromes:
        if len(palindrome)==c:
            print(palindrome)
            #str=palindrome
            #print(str)  # print palindrome of  2nd max length
else:
    print("No palindromes found in the given string.")
--------------------or---------------------------------
s1 = "abac"
palindromes = palindrome(s1)

print(palindromes)

m = 0
longest_palindrome = ""

for p in palindromes:
    if len(p) > m:
        m = len(p)
        longest_palindrome = p

print(longest_palindrome)

m = 0
longest_palindrome = ""

for p in palindromes:
    if len(p) > m:
        m = len(p)
        longest_palindrome = p

print(longest_palindrome)
----------------------------------------------------------------------------------------------
//question longest substring with unique elements
----------------------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l,length=0,0
        sw=set()
        for r in range(len(s)):
            while s[r] in sw:
                sw.remove(s[l])
                l+=1
            sw.add(s[r])
            length=max(length,(r-l+1))
        return length
//output:-abcaba
 abc
 -------------------------------------------------------------------------
//sliding window algorithm
 -------------------------------------------------------------------------
 #find the target sum by adding the array elements using sliding window
 l=list(map(int,input().split(',')))
 t=int(input())
 sum=l[0]
 i,j = 0,0
 while j<len(l):
     if sum==t:
         print(i,j,sum)
         break
     elif sum>t:
         sum-=l[i]
         i+=1
     else:
         j+=1
         sum+=l[j]
 else:
     print("target not found")
 -------------------------------------------------------------------------
//array rotation
-------------------------------------------------------------------------
s=list(map(int,input().split(',')))
k=int(input())
k=k+1
s1=s[k:len(s)]
for i in range(0,k):
    s1.append(s[i])
print(s1)
#res=l[k:]+[:k] this splits the 1-k is added first then(k-1)tolen(s)
----------------method 2----------------------------
s=list(map(int,input().split(',')))
k=int(input())
temp=[]
for i in range(0,k):
    temp.append(s[i])
    s1=s[i+1:len(s)]+temp
print(s1)
-------------------------------------------------------------------------
//search in rotated sorted array
----------------------------------------------------------------------------------------------
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        si=0
        li=len(nums)-1
        while si<=li:
            mid=(si+li)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]>nums[si]:
                if target>=nums[si] and target<=nums[mid]:
                    li=mid-1
                else:
                     si=mid+1
            else:
                if target>=nums[mid] and target<=nums[li]:
                    si=mid+1
                else:
                    li=mid-1
        return -1
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
---------------------------------------------------------
